{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { getAuth0 } from './auth0';\nlet apolloClient = null;\nconst authLink = setContext(async (request, previousContext) => {\n  let token = null;\n\n  try {\n    const auth0 = getAuth0();\n\n    if (auth0.isAuthenticated()) {\n      token = await auth0.getTokenSilently();\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return {\n    headers: _objectSpread({}, previousContext.headers, {\n      authorization: token && `Bearer ${token}`\n    })\n  };\n});\n\nfunction create(initialState) {\n  const isBrowser = typeof window !== 'undefined';\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    ssrMode: !isBrowser,\n    link: authLink.concat(new HttpLink({\n      uri: 'http://localhost:4000/',\n      credentials: 'same-origin',\n      fetch: !isBrowser && fetch\n    })),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/home/admin/src/github.com/mishguruorg/services/logview/packages/web/lib/initApollo.tsx"],"names":["ApolloClient","InMemoryCache","HttpLink","setContext","fetch","getAuth0","apolloClient","authLink","request","previousContext","token","auth0","isAuthenticated","getTokenSilently","error","console","headers","authorization","create","initialState","isBrowser","window","connectToDevTools","ssrMode","link","concat","uri","credentials","cache","restore","initApollo"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,cAAtD;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,SAASC,QAAT,QAAyB,SAAzB;AAEA,IAAIC,YAAY,GAAG,IAAnB;AAEA,MAAMC,QAAQ,GAAGJ,UAAU,CAAC,OAAOK,OAAP,EAAgBC,eAAhB,KAAoC;AAC9D,MAAIC,KAAK,GAAG,IAAZ;;AACA,MAAI;AACF,UAAMC,KAAK,GAAGN,QAAQ,EAAtB;;AACA,QAAIM,KAAK,CAACC,eAAN,EAAJ,EAA6B;AAC3BF,MAAAA,KAAK,GAAG,MAAMC,KAAK,CAACE,gBAAN,EAAd;AACD;AACF,GALD,CAKE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;;AAED,SAAO;AACLE,IAAAA,OAAO,oBACFP,eAAe,CAACO,OADd;AAELC,MAAAA,aAAa,EAAEP,KAAK,IAAK,UAASA,KAAM;AAFnC;AADF,GAAP;AAMD,CAjB0B,CAA3B;;AAmBA,SAASQ,MAAT,CAAiBC,YAAjB,EAA+B;AAC7B,QAAMC,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAApC;AAEA,SAAO,IAAIrB,YAAJ,CAAiB;AACtBsB,IAAAA,iBAAiB,EAAEF,SADG;AAEtB;AACAG,IAAAA,OAAO,EAAE,CAACH,SAHY;AAItBI,IAAAA,IAAI,EAAEjB,QAAQ,CAACkB,MAAT,CAAgB,IAAIvB,QAAJ,CAAa;AACjCwB,MAAAA,GAAG,EAAE,wBAD4B;AAEjCC,MAAAA,WAAW,EAAE,aAFoB;AAGjCvB,MAAAA,KAAK,EAAE,CAACgB,SAAD,IAAchB;AAHY,KAAb,CAAhB,CAJgB;AAStBwB,IAAAA,KAAK,EAAE,IAAI3B,aAAJ,GAAoB4B,OAApB,CAA4BV,YAA5B;AATe,GAAjB,CAAP;AAWD;;AAED,eAAe,SAASW,UAAT,CAAqBX,YAArB,EAAmC;AAChD;AACA;AACA,MAAI,OAAOE,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOH,MAAM,CAACC,YAAD,CAAb;AACD,GAL+C,CAOhD;;;AACA,MAAI,CAACb,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGY,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOb,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost'\nimport { setContext } from 'apollo-link-context'\nimport fetch from 'isomorphic-unfetch'\n\nimport { getAuth0 } from './auth0'\n\nlet apolloClient = null\n\nconst authLink = setContext(async (request, previousContext) => {\n  let token = null\n  try {\n    const auth0 = getAuth0()\n    if (auth0.isAuthenticated()) {\n      token = await auth0.getTokenSilently()\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  return {\n    headers: {\n      ...previousContext.headers,\n      authorization: token && `Bearer ${token}`\n    }\n  }\n})\n\nfunction create (initialState) {\n  const isBrowser = typeof window !== 'undefined'\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    ssrMode: !isBrowser,\n    link: authLink.concat(new HttpLink({\n      uri: 'http://localhost:4000/',\n      credentials: 'same-origin',\n      fetch: !isBrowser && fetch,\n    })),\n    cache: new InMemoryCache().restore(initialState)\n  })\n}\n\nexport default function initApollo (initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return create(initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState)\n  }\n\n  return apolloClient\n}\n"]},"metadata":{},"sourceType":"module"}