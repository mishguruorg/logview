{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { getAuth0 } from './auth0';\nvar apolloClient = null;\nvar authLink = setContext(\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(request, previousContext) {\n    var token, auth0;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            token = null;\n            _context.prev = 1;\n            auth0 = getAuth0();\n\n            if (!auth0.isAuthenticated()) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 6;\n            return auth0.getTokenSilently();\n\n          case 6:\n            token = _context.sent;\n\n          case 7:\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n\n          case 12:\n            return _context.abrupt(\"return\", {\n              headers: _objectSpread({}, previousContext.headers, {\n                authorization: token && \"Bearer \".concat(token)\n              })\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\nfunction create(initialState) {\n  var isBrowser = typeof window !== 'undefined';\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    ssrMode: !isBrowser,\n    link: authLink.concat(new HttpLink({\n      uri: 'http://localhost:4000/',\n      credentials: 'same-origin',\n      fetch: !isBrowser && fetch\n    })),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/home/admin/src/github.com/mishguruorg/services/logview/packages/web/lib/initApollo.tsx"],"names":["ApolloClient","InMemoryCache","HttpLink","setContext","fetch","getAuth0","apolloClient","authLink","request","previousContext","token","auth0","isAuthenticated","getTokenSilently","console","error","headers","authorization","create","initialState","isBrowser","window","connectToDevTools","ssrMode","link","concat","uri","credentials","cache","restore","initApollo"],"mappings":";;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,cAAtD;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,SAASC,QAAT,QAAyB,SAAzB;AAEA,IAAIC,YAAY,GAAG,IAAnB;AAEA,IAAMC,QAAQ,GAAGJ,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAC,iBAAOK,OAAP,EAAgBC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,YAAAA,KADsB,GACd,IADc;AAAA;AAGlBC,YAAAA,KAHkB,GAGVN,QAAQ,EAHE;;AAAA,iBAIpBM,KAAK,CAACC,eAAN,EAJoB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKRD,KAAK,CAACE,gBAAN,EALQ;;AAAA;AAKtBH,YAAAA,KALsB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQxBI,YAAAA,OAAO,CAACC,KAAR;;AARwB;AAAA,6CAWnB;AACLC,cAAAA,OAAO,oBACFP,eAAe,CAACO,OADd;AAELC,gBAAAA,aAAa,EAAEP,KAAK,qBAAcA,KAAd;AAFf;AADF,aAXmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;;AAAA;AAAA;AAAA;AAAA,IAA3B;;AAmBA,SAASQ,MAAT,CAAiBC,YAAjB,EAA+B;AAC7B,MAAMC,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAApC;AAEA,SAAO,IAAIrB,YAAJ,CAAiB;AACtBsB,IAAAA,iBAAiB,EAAEF,SADG;AAEtB;AACAG,IAAAA,OAAO,EAAE,CAACH,SAHY;AAItBI,IAAAA,IAAI,EAAEjB,QAAQ,CAACkB,MAAT,CAAgB,IAAIvB,QAAJ,CAAa;AACjCwB,MAAAA,GAAG,EAAE,wBAD4B;AAEjCC,MAAAA,WAAW,EAAE,aAFoB;AAGjCvB,MAAAA,KAAK,EAAE,CAACgB,SAAD,IAAchB;AAHY,KAAb,CAAhB,CAJgB;AAStBwB,IAAAA,KAAK,EAAE,IAAI3B,aAAJ,GAAoB4B,OAApB,CAA4BV,YAA5B;AATe,GAAjB,CAAP;AAWD;;AAED,eAAe,SAASW,UAAT,CAAqBX,YAArB,EAAmC;AAChD;AACA;AACA,MAAI,OAAOE,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOH,MAAM,CAACC,YAAD,CAAb;AACD,GAL+C,CAOhD;;;AACA,MAAI,CAACb,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGY,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOb,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost'\nimport { setContext } from 'apollo-link-context'\nimport fetch from 'isomorphic-unfetch'\n\nimport { getAuth0 } from './auth0'\n\nlet apolloClient = null\n\nconst authLink = setContext(async (request, previousContext) => {\n  let token = null\n  try {\n    const auth0 = getAuth0()\n    if (auth0.isAuthenticated()) {\n      token = await auth0.getTokenSilently()\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  return {\n    headers: {\n      ...previousContext.headers,\n      authorization: token && `Bearer ${token}`\n    }\n  }\n})\n\nfunction create (initialState) {\n  const isBrowser = typeof window !== 'undefined'\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    ssrMode: !isBrowser,\n    link: authLink.concat(new HttpLink({\n      uri: 'http://localhost:4000/',\n      credentials: 'same-origin',\n      fetch: !isBrowser && fetch,\n    })),\n    cache: new InMemoryCache().restore(initialState)\n  })\n}\n\nexport default function initApollo (initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return create(initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState)\n  }\n\n  return apolloClient\n}\n"]},"metadata":{},"sourceType":"module"}