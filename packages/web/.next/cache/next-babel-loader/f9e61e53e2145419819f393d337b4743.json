{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/admin/src/github.com/mishguruorg/services/logview/packages/web/lib/withApolloClient.tsx\";\nimport React from 'react';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nimport initApollo from './initApollo';\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(Apollo, _React$Component);\n\n    _createClass(Apollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var AppTree, appProps, apollo, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  AppTree = ctx.AppTree;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return App.getInitialProps(ctx);\n\n                case 5:\n                  appProps = _context.sent;\n\n                case 6:\n                  // Run all GraphQL queries in the component tree\n                  // and extract the resulting data\n                  apollo = initApollo({});\n\n                  if (!(typeof window === 'undefined')) {\n                    _context.next = 17;\n                    break;\n                  }\n\n                  _context.prev = 8;\n                  _context.next = 11;\n                  return getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 28\n                    },\n                    __self: this\n                  })));\n\n                case 11:\n                  _context.next = 16;\n                  break;\n\n                case 13:\n                  _context.prev = 13;\n                  _context.t0 = _context[\"catch\"](8);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 16:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 17:\n                  // Extract query data from the Apollo store\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 19:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[8, 13]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function Apollo(props) {\n      var _this;\n\n      _classCallCheck(this, Apollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Apollo).call(this, props));\n\n      _defineProperty(_assertThisInitialized(_this), \"apolloClient\", void 0);\n\n      _this.apolloClient = initApollo(props.apolloState);\n      return _this;\n    }\n\n    _createClass(Apollo, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({\n          apolloClient: this.apolloClient\n        }, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return Apollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["/home/admin/src/github.com/mishguruorg/services/logview/packages/web/lib/withApolloClient.tsx"],"names":["React","Head","getDataFromTree","initApollo","App","ctx","AppTree","appProps","getInitialProps","apollo","window","console","error","rewind","apolloState","cache","extract","props","apolloClient","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAGA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,gBAAe,UAAAC,GAAG,EAAI;AAAA;;AACpB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAKgCC,GALhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAMYC,kBAAAA,OANZ,GAMwBD,GANxB,CAMYC,OANZ;AAQQC,kBAAAA,QARR,GAQmB,EARnB;;AAAA,uBASQH,GAAG,CAACI,eATZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAUuBJ,GAAG,CAACI,eAAJ,CAAoBH,GAApB,CAVvB;;AAAA;AAUME,kBAAAA,QAVN;;AAAA;AAaI;AACA;AACME,kBAAAA,MAfV,GAemBN,UAAU,CAAC,EAAD,CAf7B;;AAAA,wBAgBQ,OAAOO,MAAP,KAAkB,WAhB1B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAmBcR,eAAe,CAAC,oBAAC,OAAD,eAAaK,QAAb;AAAuB,oBAAA,YAAY,EAAEE,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAD,CAnB7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBQ;AACA;AACA;AACAE,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AAxBR;AA2BM;AACA;AACAX,kBAAAA,IAAI,CAACY,MAAL;;AA7BN;AAgCI;AACMC,kBAAAA,WAjCV,GAiCwBL,MAAM,CAACM,KAAP,CAAaC,OAAb,EAjCxB;AAAA,qEAoCST,QApCT;AAqCMO,oBAAAA,WAAW,EAAXA;AArCN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAyCE,oBAAaG,KAAb,EAAoB;AAAA;;AAAA;;AAClB,kFAAMA,KAAN;;AADkB;;AAElB,YAAKC,YAAL,GAAoBf,UAAU,CAACc,KAAK,CAACH,WAAP,CAA9B;AAFkB;AAGnB;;AA5CH;AAAA;AAAA,+BA8CY;AACR,eAAO,oBAAC,GAAD;AAAK,UAAA,YAAY,EAAE,KAAKI;AAAxB,WAA0C,KAAKD,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AAhDH;;AAAA;AAAA,IAA4BjB,KAAK,CAACmB,SAAlC,0CACuB,iBADvB;AAkDD,CAnDD","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport { getDataFromTree } from 'react-apollo'\nimport { ApolloClient } from 'apollo-boost'\n\nimport initApollo from './initApollo'\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = 'withApollo(App)'\n\n    public apolloClient: ApolloClient<any>\n\n    static async getInitialProps (ctx) {\n      const { AppTree } = ctx\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo({})\n      if (typeof window === 'undefined') {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />)\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error)\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract()\n\n      return {\n        ...appProps,\n        apolloState\n      }\n    }\n\n    constructor (props) {\n      super(props)\n      this.apolloClient = initApollo(props.apolloState)\n    }\n\n    render () {\n      return <App apolloClient={this.apolloClient} {...this.props} />\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}